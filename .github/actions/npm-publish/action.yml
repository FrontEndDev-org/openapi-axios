name: npm publish
description: 按仓库类型执行 npm publish，可以将包发布到 npm、github 等仓库

inputs:
  type:
    description: 仓库类型，可选 npm/github
    required: true
  token:
    description: 仓库授权令牌，如果是非 github 仓库则需要指定
    required: false
  tag:
    description: 要发布的标签，默认是 latest
    required: false
    default: latest

runs:
  using: composite
  steps:
    - name: 备份原始 .npmrc 文件
      shell: bash
      run: cp .npmrc .npmrc-bk 2> /dev/null || true

    - name: 仓库类型是 npm
      if: inputs.type == 'npm'
      shell: bash
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ inputs.token }}" > .npmrc
        echo "registry=https://registry.npmjs.org/" >> .npmrc
        echo "always-auth=true" >> .npmrc

    - name: 仓库类型是 github
      if: inputs.type == 'github'
      shell: bash
      run: |
        echo "//npm.pkg.github.com/:_authToken=${{ github.token }}" > .npmrc
        echo "registry=https://npm.pkg.github.com/" >> .npmrc
        echo "always-auth=true" >> .npmrc
    - name: 将 package.json name 修改为符合 GitHub 的命名要求
      if: inputs.type == 'github'
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const pkg = require('./package.json');
          // originName        ->  underlineName
          // my-pkg            ->  my-pkg
          // @my-scope/my-pkg  ->  my-scope__my-pkg
          const underlineName = pkg.name.replace(/@(.*)\/(.*)/, '$1__$2');
          // @ref https://github.com/actions/toolkit/blob/457303960f03375db6f033e214b9f90d79c3fe5c/packages/github/src/context.ts
          const owner = context.payload.repository.owner.login;
          pkg.name = '@' + owner + '/' + underlineName;
          const fs = require('fs');
          fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf8');

    - name: 发布
      shell: bash
      run: npm publish --tag ${{ inputs.tag }}

    - name: 同步新版本到 npmmirror.com
      if: inputs.type == 'npm'
      shell: bash
      run: curl --silent -X PUT https://registry-direct.npmmirror.com/${{ steps.pkg.outputs.name }}/sync?sync_upstream=true

    - name: 恢复原始 .npmrc 文件
      if: always()
      shell: bash
      run: |
        cp .npmrc-bk .npmrc 2> /dev/null || true
        rm -rf .npmrc-bk
